%title 数组和指针
= 数组 =
== 通常的数组 ==
数组的长度是固定的!
=== 定义方法: ===
    int a[] = {1,2,3};//显示初始化时,可以省略维数(编译器确定数组长度) 
    
    int a[4] = {1,2}; //只初始化a[0],a[1]. a[2],a[3]不会初始化(函数体内)或者初始化为0(函数体外)
    
如果是类类型,自动调用默认构造函数初始化

=== 数组一种类型, 它具备哪些特性 ===
int a[] = {1,2,3};

a是一个数组

{{{
    cout<<a<<endl; // 数组的地址    
    cout<<*(a+1)<<endl; // 2  可通过指针迭代获取元素
    cout<<size(a)<<endl; // 12(数组的大小)
}}}
    
== 特殊的数组--字符数组 ==
=== 字符数组还可以用字符串字面值初始化  ===
  char a1[] = "C++";(同char a1[] = {'C','+','+','\0'})
* 数组的维数是4而不是3,因为自动在结尾添加'\0'(null)
* a1是字符数组, 大小又填充值决定,这里是4字节
{{{ 
    cout<<a1<<endl;   // 字符串 --> 这里显示出和其他类型数组的区别                                                          
    cout<<*a1<<endl;  // C                                                          
    cout<<sizeof(a1)<<endl;  // 4(数组的大小)
}}}
    
=== 用char*类型的指针操纵C风格字符串 ===
以null结尾的字符数组,就是C风格字符串.上面以null结尾的字符数组是C风格字符串
    char *a2 = "C++";
同a1唯一不同在于,a1是数组,sizeof(a1)是数组的大小.a2是字符指针,sizeof(a2)是指针的大小.在操纵字符串上的方法一致

= 一个区别 =
{{{
    string s = "abc";
    string *sp = &s; //把string对象s的地址附给sp
    cout<<*sp<<endl; //得到"abc"
    *sp = "A new word";//把sp指向的内容用字符串字面值替代
    cout<<*sp<<endl; //得到"A new word"
}}}
= 不要忘记字符串结束符null =
标准库函数(#include<cstring>)是string.h头文件的c++版本
    char a[]={'c','+','+'};
    cout<<strlen(a)<<endl;//disaster:a is not null-terminated
    标准库函数总是假定其参数字符串以null结尾 

= 新旧代码的兼容 =
C风格字符串与字符串字面值有相同的数据结构,而且都以null结束,因此可以互相代替.

    const char *a="abc";
    string b(a);

