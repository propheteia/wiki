%title sizeof
== 数据类型的大小 ==
存储器没有任何结构和意义

让存储器具有结构的基本方法是块（chunk）处理存储.大部分计算机使用特定位数的块来处理存储，有8，16，32，64位。

这里使用的是64位的机器。

虽然确切的大小因机器不同而不同，但通常都将8位的块作为一个字节。4个字节作为一个word.

每个字节都有它的地址。比如722323.要让722323这个地址有意义， 必须知道存储在该地址的值的类型。一旦知道了该地址值的类型，就知道了表示该类型的值需要多少位以及如何解释这些位。

例如，地址722323的位，若是无符号整数类型，则表示113；若是字符类型，则表示q.

== 64位linux系统数据类型的大小 ==
{{{
#include<iostream>
using namespace std;
int main()
{
        cout<<"int:"<<sizeof(int)<<endl;
        cout<<"long int:"<<sizeof(long int)<<endl;
        cout<<"float:"<<sizeof(float)<<endl;
        cout<<"char:"<<sizeof(char)<<endl;
        cout<<"double:"<<sizeof(double)<<endl;
        cout<<"char*:"<<sizeof(char*)<<endl;
        cout<<"int*:"<<sizeof(int*)<<endl;
}
}}}
输出:
{{{
输出：int:4
　　　long int:8  　　
　　　float:4
　　  char:1
　  　double:8
　　  char*:8
　　  int*:8            //所有类型的指针长度都为8
}}}

== 内存字节对齐 == 
参考:http://blog.csdn.net/hairetz/article/details/4084088
* 数据成员对齐规则：结构(struct)(或联合(union))的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小或者成员的子成员大小（只要该成员有子成员，比如说是数组，结构体等）的整数倍开始(比如int在３２位机为４字节,则要从４的整数倍地址开始存储。

* 结构体作为成员:如果一个结构里有某些结构体成员,则结构体成员要从其内部最大元素大小的整数倍地址开始存储.(struct a里存有struct b,b里有char,int ,double等元素,那b应该从8的整数倍开始存储.)

* 收尾工作:结构体的总大小,也就是sizeof的结果,.必须是其内部最大成员的整数倍.不足的要补齐.

实战:
{{{
typedef struct bb
{
 int id;             //[0]....[3]
 double weight;      //[8].....[15]　　　　　　原则１
 float height;      //[16]..[19],总长要为８的整数倍,补齐[20]...[23]　　　　　原则３
}BB;

typedef struct aa
{
 char name[2];     //[0],[1]
 int  id;         //[4]...[7]　　　　　　　　　　原则１

 double score;     //[8]....[15]　　　　
 short grade;    //[16],[17]　　　　　　　　
 BB b;             //[24]......[47]　　　　　　　　　　原则２
}AA;

int main()
{
  AA a;
  cout<<sizeof(a)<<" "<<sizeof(BB)<<endl;
  return 0;
}
}}}

如果有静态变量, 是放在数据全局区, 而sizeof计算栈中分配的大小
