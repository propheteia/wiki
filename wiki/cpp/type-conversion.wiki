%title 数据类型转换
== int转换为char* ==
使用sprintf
{{{
头文件 #include<stdio.h>

语法: int sprintf(string format, mixed [args]...);

返回值：字符串长度（strlen）

转换字符

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

% 印出百分比符号，不转换。

b 整数转成二进位。

c 整数转成对应的 ASCII 字元。

d 整数转成十进位。

f 倍精确度数字转成浮点数。

o 整数转成八进位。

s 整数转成字串。

x 整数转成小写十六进位。

X 整数转成大写十六进位。

例子:
    int n = 30;  

    char c[20];  

    sprintf(c, "%d", n);      
}}}
== 隐式转换 ==
几个典型的隐式转换:
    int *ip;
    ip = 0; //the int 0 converted to null pointer of type int *
    
    int ival;
    if (ival) // ival converted to bool
    while(cin) // cin converted to bool

还有个由标准库类型定义的转换
    string s;
    while(cin>>s) // iostream converted to bool ,检验流的状态,是否结束
    
== 显式转换 ==
=== 以前的显示转换 ===
    float a=1.0f;
    cout << (int&)a << endl;
这里(int&)a相当于*(int*)&a, 从float型a的地址开始读,认为它是int.

int&是引用类型，(int &)a的意思是将a存储单元开始的内容解释为一个int引用。

相关代码:
{{{
//5-4-1.cpp 
#include<iostream>                                                      
#include<stdio.h>                                                       
#include<string.h>                                                      
using namespace std;                                                    
int main()                                                              
{                                                                       
    float a = 1.0f;                                                     
    cout<<(int)a<<endl;                                                 
    cout<<&a<<endl;                                                     
    cout<<(int&)a<<endl;                                                
    cout<<*(int*)&a<<endl;                                              
    cout<<boolalpha<<((int)a==(int&)a)<<endl;                           
 }   
}}}

类似:
{{{
#include<stdio.h>    
int main()
{
    unsigned int a = 0xfffffff7;
    unsigned char i = (unsigned char)a;
    char *b = (char*)&a; // 等同与 unsigned int *p = a; char *b = (char*)p
}
}}}



== 命名的强制类型转换 ==
#TODO

