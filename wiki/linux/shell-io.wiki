%title Linux系统的Shell I/O重定向详解
== 基本概念==
* I/O重定向通常与 FD有关，shell的FD通常为10个，即 0～9；
* 常用FD有3个，为0（stdin，标准输入）、1（stdout，标准输出）、2（stderr，标准错误输出），默认与keyboard、monitor、monitor有关；
* 用 < 来改变读进的数据信道(stdin)，使之从指定的档案读进；
* 用 > 来改变送出的数据信道(stdout, stderr)，使之输出到指定的档案；
* 0 是 < 的默认值，因此 < 与 0<是一样的；同理，> 与 1> 是一样的；
* 在IO重定向 中，stdout 与 stderr 的管道会先准备好，才会从 stdin 读进资料；
* 管道“|”(pipe line):上一个命令的 stdout 接到下一个命令的 stdin;
* tee 命令是在不影响原本 I/O 的情况下，将 stdout 复制一份到档案去;
* bash（ksh）执行命令的过程：分析命令－变量求值－命令替代（``和$( )）－重定向－通配符展开－确定路径－执行命令；( ) 将 command group 置于 sub-shell 去执行，也称 nested sub-shell，它有一点非常重要的特性是：继承父shell的Standard input, output, and error plus any other open file descriptors。
* exec 命令：常用来替代当前 shell 并重新启动一个 shell，换句话说，并没有启动子 shell。使用这一命令时任何现有环境都将会被清除。exec 在对文件描述符进行操作的时候，也只有在这时，exec 不会覆盖你当前的 shell 环境。 

== 基本IO ==
* cmd > file 把 stdout 重定向到 file 文件中；
* cmd >> file 把 stdout 重定向到 file 文件中(追加)；
* cmd 1> file 把 stdout 重定向到 file 文件中；
* cmd > file 2>&1 把 stdout 和 stderr 一起重定向到 file 文件中；
* cmd 2> file 把 stderr 重定向到 file 文件中；
* cmd 2>> file 把 stderr 重定向到 file 文件中(追加)；
* cmd >> file 2>&1 把 stderr 和 stderr 一起重定向到 file 文件中(追加)；
* cmd < file >file2 cmd 命令以 file 文件作为 stdin，以 file2 文件作为 stdout；
* cat <>file 以读写的方式打开 file；
* cmd < file cmd 命令以 file 文件作为 stdin；
* cmd << delimiter Here document，从 stdin 中读入，直至遇到 delimiter 分界符。 

== 进阶IO ==
* >&n 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出；
* <&n 标准输入复制自文件描述符 n；
* <&- 关闭标准输入（键盘）；
* >&- 关闭标准输出；
* n<&- 表示将 n 号输入关闭；
* n>&- 表示将 n 号输出关闭；
上述所有形式都可以前导一个数字，此时建立的文件描述符由这个数字指定而不是缺省的 0 或 1。如：
... 2>file 运行一个命令并把错误输出(文件描述符 2)定向到 file。
... 2>&1 运行一个命令并把它的标准输出和输出合并。(严格的说是通过复制文件描述符 1 来建立文件描述符 2 ，但效果通常是合并了两个流。)

我们对 2>&1详细说明一下 ：2>&1 也就是 FD2＝FD1 ，这里并不是说FD2 的值 等于FD1的值，因为 > 是改变送出的数据信道，也就是说把 FD2 的 “数据输出通道” 改为 FD1 的 “数据输出通道”。如果仅仅这样，这个改变好像没有什么作用，因为 FD2 的默认输出和 FD1的默认输出本来都是 monitor，一样的！ 但是，当 FD1 是其他文件，甚至是其他 FD 时，这个就具有特殊的用途了。请大家务必理解这一点。 

[[http://cloudbbs.org/forum.php?mod=viewthread&tid=15515|一些例子]]
