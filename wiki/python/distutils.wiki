%title distutils 模块 
= 包和模块的文件模型 =
如果你发现自己正在用 Python 编写一个大型的子系统 (或者，很有可能，当你意识到你的小型子系统已经成长为一个大型子系统时)，你应该花费些时间设计一个好的包架构。它是 Python 所擅长的事情之一，所以应该好好利用它。 

{{{
    包和模块模型:
    exercise
        |--__init__.py
        |
        |--module_a.py
        |        |-- class football
        |        |-- class TTException
        |
        |--module_b.py
                 |-- function go_for_basketball
    如果__init__.py必须有,这样才能导入以下两个模块 
        import exercise.module_a.football

    如果要通过包直接找到某个类或者函数,则可以通过在__init__.py中import该类或函数
    此时在__init__.py中添加    
        from module_a import football
    那么在调用football方法时,可以这样
        from exercise import football
}}}

== setup.py ==
{{{
from distutils.core import setup
setup(
    name="exercise",
    license="RA",
    version="0.1.1",
    description="Automation Test module for python",
    author="Wenbin Wang",
    author_email="wenbin.rc@gmail.com",
    packages=["exercise"],      -- 需要安装的文件夹(包)
    long_description="""AutoTest is a test platphome for RA,PowerMonitor development te\
                        team.""",
    )
运行结果在site-package下面产生包(exercise),
和一个名为"exercise-0.1.1-py2.7.egg-info"的文件
内容如下:
    Metadata-Version: 1.0
    Name: exercise
    Version: 0.1.1
    Summary: Automation Test module for python
    Home-page: UNKNOWN
    Author: Wenbin Wang
    Author-email: wenbin.rc@gmail.com
    License: RA
    Description: AutoTest is a test platphome for RA,PowerMonitor development team
    Platform: UNKNOWN
}}}

= python寻找模块的顺序 =
{{{
1. 首先判断这个module是不是built-in即内建模块，
　 如果是则引入内建模块，如果不是则在一个称为sys.path的list中寻找

2. sys.path在python脚本执行时动态生成，包括以下3个部分：
　　a.脚本执行的位置，即当前路径
　　b.环境变量中的PYTHONPATH, 即.bash_profile
　　c.安装python时的依赖位置(通常是"../python2.7/site-packages")

执行python setup.py install 实际上做了两件事:
1. 将包(模块)添加到python系统路径下(site-packages)
2. 生成egg-info的文件,包含包的信息
}}}

= 上传包,pip安装 =
* http://www.ibm.com/developerworks/opensource/library/os-pythonpackaging/index.html ,
* http://docs.python.org/2/distutils/packageindex.html#package-index
* https://pypi.python.org/pypi/mypypi
 


= 特殊的__init__.py =
{{{
run.py
|--app
    |--__init__.py
    |--views.py
}}}

__init__.py
{{{
app=Flask(__name__)
}}}

views.py
{{{
from app import app
}}}

run.py
{{{
    from app import app
    from app.views import *
}}}

这样是可行的,但是views.py在模块内不能被引用,只有对其作为包的一部分引用

若想让其在包内可以被作为模块引用,可以这样改:

views.py
{{{
from __init__ import app
}}}

但是这样改在运行run的时候出现问题了,原因在于:
{{{
    通过比较app.__setattri__发现
    run中的app和views中的app指向不同的地址,所以出现无法定向的错误
    run中引用的是一个包中的某个对象,而views引用的是模块中的对象
}}}

从python2.7用户手册中了解到,可以这样
views.py
{{{
from . import app
}}}
当然也表示从包中引用

但如果__init__.py改为别的名称(比如test),则没有问题.
run.py
{{{
    from app.test import app
    from app.views import *
}}}
他们都是从模块中导入的app

这里可见__init__.py不易被察觉的特殊性

= 脚本的安装 =
{{{
setup(
    scripts=['test.py'],
)

test.py的第一行需要加上:
#!/usr/bin/env python
}}}
这样会在env/bin/下生成一个可执行指令:test.py
