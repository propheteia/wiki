%title Python
%toc
= with: =
{{{class="brush:python"
import sys
class test:
    def __enter__(self):
           print "enter"
           return 1
    def __exit__(self,*args):
           print "exit"
           return True
with test() as t:
    print "t is %s, yes, it is "%t #.format(t)
print "end"
}}}
运行结果:
    enter
    t is 1, yes, it is 
    exit
    end
= 当模块与其包含的包重名 =
创建文件：
    vim logging.py
编辑脚本：
    {{{class="brush:python"
    import logging
    logging.warning("watch out!")
    logging.info("I told you so")
    }}}
运行错误:
    {{{
    Traceback (most recent call last):
  File "logging.py", line 1, in <module>
    import logging
  File "/home/wenbin/test-dir/logging.py", line 2, in <module>
    logging.warning("watch out!")
AttributeError: 'module' object has no attribute 'warning'
    }}}
错误信息中看出，import搜索的路径当前文件夹处于优先位置。因此
新建的文件名要避免"普通“

= hasattr()和 getattr() =
hasattr()和 getattr()分别判断对象是否有某个属性及获得某个属性值。
In [35]: hasattr(a, 'split')
Out[35]: True
In [36]: getattr(a, 'split')
Out[36]: <built-in method split of str object at 0x831abe0>

= 函式编程 =
在函式编程中,最著名的特色就是高序(High Order)。简单地说,就是定制一个算法,按规则来指定容器中的每一个元素。最常用的 High Order 为:
* 映射,也就是将算法施于每个元素,将返回值合并为一个新的容器。
* 过滤,将算法施于每个元素,将返回值为真的元素合并为一个新的容器。
* 合并,将算法(可能携带一个初值)依次施于每个元素,将返回值作为下一步计算
* 的参数之一,与下一个元素再计算,直至最终获得一个总的结果。
== map ==
 {{{def foo(x):

        return x*x

 print map(foo, range(10))
}}}
map 允许接收三个或三个以上的参数

用途:函数要执行多次,且参数有一定的规律
= filter =
用途:对结果过滤
= reduce =
用途:方便地实现了计算结果的重用,节省了大量的 CPU 周期。在实际应用中,reduce 可以用来实现统计计算或时序依赖的遍历行为。

= xlrd =
Open the workbook
{{{class="brush:python"
import xlrd
wb = xlrd.open_workbook('myworkbook.xls')
Check the sheet names
wb.sheet_names()
Get the first sheet either by index or by name
sh = wb.sheet_by_index(0)
sh = wb.sheet_by_name(u'Sheet1')
}}}
Iterate through rows, returning each as a list that you can index:
{{{class="brush:python"
for rownum in range(sh.nrows):
    print sh.row_values(rownum)
}}} 
If you just want the first column:
{{{class="brush:python"
first_column = sh.col_values(0)
}}}
Index individual cells:
{{{class="brush:python"
cell_A1 = sh.cell(0,0).value
cell_C4 = sh.cell(rowx=3,colx=2).value
}}}
附文：python 解析xml
~                    
= *args **kwargs =
*args表示任何多个无名参数，它是一个tuple； **kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前.
{{{
def foo(*args, **kwargs):
    print 'args = ', args
    print 'kwargs = ', kwargs
    print '---------------------------------------'

if __name__ == '__main__':
    foo(1,2,3,4)
    foo(a=1,b=2,c=3)
    foo(1,2,3,4, a=1,b=2,c=3)
    foo('a', 1, None, a=1, b='2', c=3)
}}}
看到xlrd模块的安装包是这样得到安装信息的dict的
{{{
def mkargs(**kwargs):    
    return kwargs

args = mkargs(
    name = 'xlrd',
    version = __VERSION__,    
    author = 'John Machin',   
    author_email = 'sjmachin@lexicon.net', 
    url = the_url,       
    packages = ['xlrd'], 
    scripts = [
        'scripts/runxlrd.py',     
        ],
    description = 'Library for developers to extract data from Microsoft Excel (tm) spreadsheet files',
    long_description = \
        "Extract data from Excel spreadsheets (XLS only, versions 2.0 to 2003) on any platform. " \
        "Pure Python (2.6 to 2.7). Strong support for Excel dates. Unicode-aware.",
    platforms = ["Any platform -- don't need Windows"],
    license = 'BSD',
    keywords = ['xls', 'excel', 'spreadsheet', 'workbook'],
    )

args23 = mkargs(
    download_url = the_url,   
    classifiers = [
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Programming Language :: Python',
        'Operating System :: OS Independent',
        'Topic :: Database',      
        'Topic :: Office/Business',
        'Topic :: Software Development :: Libraries :: Python Modules',
        ],           
    )                

args.update(args23)

这里,update将dict args23合并到args
}}}
这样返回的就是个dict
= 函数式编程 =
{{{
    def good():
        t=good.t
        print type(t)
    
    good.t=0 #在函数外将函数内的变量赋值
    if __name__=="__main__":
        good()
}}}
= yield =
带有 yield 的函数在 Python 中被称之为 generator（生成器）
版本一:
{{{
                
 def fab(max): 
    n, a, b = 0, 0, 1 
    L = [] 
    while n < max: 
        L.append(b) 
        a, b = b, a + b 
        n = n + 1 
    return L 
}}}
版本二:
{{{
 class Fab(object): 

    def __init__(self, max): 
        self.max = max 
        self.n, self.a, self.b = 0, 0, 1 

    def __iter__(self): 
        return self 

    def next(self): 
        if self.n < self.max: 
            r = self.b 
            self.a, self.b = self.b, self.a + self.b 
            self.n = self.n + 1 
            return r 
        raise StopIteration() 
}}}
yield版本三:
{{{
 def fab(max): 
    n, a, b = 0, 0, 1 
    while n < max: 
        yield b 
        #print b 
        a, b = b, a + b 
        n = n + 1 

 for i in fab(5):
    print i
}}}       

简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。

我的理解,以上三个版本的本质区别在于,第一个版本按照某种方式产生数据,并将其存放(在List),需要时直接从list中调用.而版本三只在需要时以某种方式产生数据,因此不需要空间来存放.
转:[[http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/|developerworks]]

= tuple有什么好处? =
    Tuple 比 list 操作速度快。如果您定义了一个值的常量集，并且唯一要用它做的是不断地遍历它，请使用 tuple 代替 list。

    如果对不需要修改的数据进行 “写保护”，可以使代码更安全。使用 tuple 而不是 list 如同拥有一个隐含的 assert 语句，说明这一数据是常量。如果必须要改变这些值，则需要执行 tuple 到 list 的转换 (需要使用一个特殊的函数)。

    还记得我说过 dictionary keys 可以是字符串，整数和 “其它几种类型”吗？Tuples 就是这些类型之一。Tuples 可以在 dictionary 中被用做 key，但是 list 不行。实际上，事情要比这更复杂。Dictionary key 必须是不可变的。Tuple 本身是不可改变的，但是如果您有一个 list 的 tuple，那就认为是可变的了，用做 dictionary key 就是不安全的。只有字符串、整数或其它对 dictionary 安全的 tuple 才可以用作 dictionary key。

    Tuples 可以用在字符串格式化中.
    
    tuple和list可以相互转换. a=[]  b=tuple(a) type(b) --> tuple


