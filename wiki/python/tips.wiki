%title Python
= with: =
{{{class="brush:python"
import sys
class test:
    def __enter__(self):
           print "enter"
           return 1
    def __exit__(self,*args):
           print "exit"
           return True
with test() as t:
    print "t is %s, yes, it is "%t #.format(t)
print "end"
}}}
运行结果:
    enter
    t is 1, yes, it is 
    exit
    end
= 当模块与其包含的包重名 =
创建文件：
    vim logging.py
编辑脚本：
    {{{class="brush:python"
    import logging
    logging.warning("watch out!")
    logging.info("I told you so")
    }}}
运行错误:
    {{{
    Traceback (most recent call last):
  File "logging.py", line 1, in <module>
    import logging
  File "/home/wenbin/test-dir/logging.py", line 2, in <module>
    logging.warning("watch out!")
AttributeError: 'module' object has no attribute 'warning'
    }}}
错误信息中看出，import搜索的路径当前文件夹处于优先位置。因此
新建的文件名要避免"普通“

= hasattr()和 getattr() =
hasattr()和 getattr()分别判断对象是否有某个属性及获得某个属性值。
In [35]: hasattr(a, 'split')
Out[35]: True
In [36]: getattr(a, 'split')
Out[36]: <built-in method split of str object at 0x831abe0>

= 函式编程 =
在函式编程中,最著名的特色就是高序(High Order)。简单地说,就是定制一个算法,按规则来指定容器中的每一个元素。最常用的 High Order 为:
* 映射,也就是将算法施于每个元素,将返回值合并为一个新的容器。
* 过滤,将算法施于每个元素,将返回值为真的元素合并为一个新的容器。
* 合并,将算法(可能携带一个初值)依次施于每个元素,将返回值作为下一步计算
* 的参数之一,与下一个元素再计算,直至最终获得一个总的结果。
== map ==
 {{{def foo(x):

        return x*x

 print map(foo, range(10))
}}}
map 允许接收三个或三个以上的参数

用途:函数要执行多次,且参数有一定的规律
= filter =
用途:对结果过滤
= reduce =
用途:方便地实现了计算结果的重用,节省了大量的 CPU 周期。在实际应用中,reduce 可以用来实现统计计算或时序依赖的遍历行为。

= xlrd =
Open the workbook
{{{class="brush:python"
import xlrd
wb = xlrd.open_workbook('myworkbook.xls')
Check the sheet names
wb.sheet_names()
Get the first sheet either by index or by name
sh = wb.sheet_by_index(0)
sh = wb.sheet_by_name(u'Sheet1')
}}}
Iterate through rows, returning each as a list that you can index:
{{{class="brush:python"
for rownum in range(sh.nrows):
    print sh.row_values(rownum)
}}} 
If you just want the first column:
{{{class="brush:python"
first_column = sh.col_values(0)
}}}
Index individual cells:
{{{class="brush:python"
cell_A1 = sh.cell(0,0).value
cell_C4 = sh.cell(rowx=3,colx=2).value
}}}
附文：python 解析xml
~                    
= *args **kwargs =
*args表示任何多个无名参数，它是一个tuple； **kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前.
{{{
def foo(*args, **kwargs):
    print 'args = ', args
    print 'kwargs = ', kwargs
    print '---------------------------------------'

if __name__ == '__main__':
    foo(1,2,3,4)
    foo(a=1,b=2,c=3)
    foo(1,2,3,4, a=1,b=2,c=3)
    foo('a', 1, None, a=1, b='2', c=3)
}}}
看到xlrd模块的安装包是这样得到安装信息的dict的
{{{
def mkargs(**kwargs):    
    return kwargs

args = mkargs(
    name = 'xlrd',
    version = __VERSION__,    
    author = 'John Machin',   
    author_email = 'sjmachin@lexicon.net', 
    url = the_url,       
    packages = ['xlrd'], 
    scripts = [
        'scripts/runxlrd.py',     
        ],
    description = 'Library for developers to extract data from Microsoft Excel (tm) spreadsheet files',
    long_description = \
        "Extract data from Excel spreadsheets (XLS only, versions 2.0 to 2003) on any platform. " \
        "Pure Python (2.6 to 2.7). Strong support for Excel dates. Unicode-aware.",
    platforms = ["Any platform -- don't need Windows"],
    license = 'BSD',
    keywords = ['xls', 'excel', 'spreadsheet', 'workbook'],
    )

args23 = mkargs(
    download_url = the_url,   
    classifiers = [
        'Development Status :: 5 - Production/Stable',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Programming Language :: Python',
        'Operating System :: OS Independent',
        'Topic :: Database',      
        'Topic :: Office/Business',
        'Topic :: Software Development :: Libraries :: Python Modules',
        ],           
    )                

args.update(args23)

这里,update将dict args23合并到args
}}}
这样返回的就是个dict

